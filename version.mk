# Version string comes from a git tag. This is the single source of the version.
# Rather than trying to synchronize tags and a header file, we'll just 
# generate the header file via this Makefile.
#
# This file also generates some common variables. See GIT_*
#
# This version is used for the entire repo.

# String containing latest tag, number of commits since the tag, the character
# 'g', and the 7 character commitish.
# Eg. v0.2-311-gff729eb+
export GIT_VERSION := $(shell git describe --abbrev=7 --dirty='+' --always --tags)

# Current tag, if HEAD has a tag. Otherwise, it is empty.
export GIT_TAG := $(shell git describe --exact-match --tags HEAD 2> /dev/null)

# Most recent tag, by itself
# Eg. v0.2
export GIT_TAG_LATEST := $(shell git describe --abbrev=0 --always --tags)

# Parse out the major and minor nums from the tag
# Note the double dollar escape on the awk variables.
#VER_MAJOR := $(shell echo $(GIT_TAG_LATEST) | awk -F'[v.]' '{print $$2}')
#VER_MINOR := $(shell echo $(GIT_TAG_LATEST) | awk -F'[v.]' '{print $$3}')

VER_MAJOR := 1
VER_MINOR := 0

# TODO: Define this to be "" for release builds, and "d" for developer builds
DEV_SUFFIX := d
# Finalize the version string
VER_STRING := $(GIT_TAG_LATEST)$(DEV_SUFFIX)

ifeq ($(V),1)
# Debug print
$(info tag   : $(GIT_TAG_LATEST))
$(info major : $(VER_MAJOR))
$(info minor : $(VER_MINOR))
$(info string: $(VER_STRING))
endif

# Current branch, with slashes swapped for dashes.
export GIT_BRANCH := $(subst /,-,$(shell git rev-parse --abbrev-ref HEAD))

# 7 character commitish
# Eg. ff729eb
export GIT_COMMITISH := $(shell git rev-parse --short=7 HEAD)

# Use tag name and commitish if we're on a tag, otherwise use branch
# name and commitish. Note that this results in slightly different
# output if the working directory is dirty--on a tag, we get something
# like "v0.2+_02abcde", while on a branch we get "bradey-ble_02abcde+".
export GIT_INFO := $(if $(GIT_TAG),$(GIT_VERSION)_$(GIT_COMMITISH),$(GIT_BRANCH)_$(GIT_VERSION))

# Repo root full path
export GIT_REPO_ROOT := $(shell git rev-parse --show-toplevel)

export VERSION_FILE ?= $(GIT_REPO_ROOT)/version.h
# Use PHONY so that the file is always rebuilt
.PHONY: $(VERSION_FILE)
$(VERSION_FILE):
	@echo "Generating: $@"
	@echo "/* Generated by version.mk. Do not edit. */"                    > $@
	@echo "#pragma once"                                                   >> $@
	@echo "#define FW_VERSION_MAJOR      $(VER_MAJOR)"                     >> $@
	@echo "#define FW_VERSION_MINOR      $(VER_MINOR)"                     >> $@
	@echo "#define FW_VERSION_STRING     \"$(VER_STRING)\""                >> $@
	@echo "#define FW_VERSION_INTEGER    ((FW_VERSION_MAJOR<<16)|(FW_VERSION_MINOR))"  >> $@
	@echo "#define FW_VERSION_GIT_STRING FW_VERSION_STRING \"-\" \"$(GIT_VERSION)\""          >> $@